package com.library.api.entities;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.library.api.entities.common.BaseEntity;

@Entity
@Table
public class Cote extends BaseEntity {
	
	// TODO Id is libelle, autogenerated from libraryId, documentSupport, documentAuteur (something like (LibraryID+SupportID+Substring(AuteurLibelle, 0, 3)+AutoIncrementId(3digits)
	// the first chain could be generated by the client and the database would set the 3 digit number, somehow.
	
	private String libelle;
	
	@ManyToOne
	@JsonIgnoreProperties("cotes")
	private Document document;
	
	@ManyToOne
	@JsonIgnoreProperties({"cotes","address"})
	private Library library;
	
	@OneToMany(mappedBy="cote", cascade=CascadeType.ALL, orphanRemoval=true)
	@JsonIgnoreProperties({"cote", "user"})
	private List<UserCote> userCotes;	
	
	@Column(columnDefinition = "boolean default false")
	private Boolean reserved;
	
	public Cote() {		
	}

	public Cote(Document document, Library library) {
		super();
		//TODO		
		this.document = document;
		this.library = library;
	}

	public String getLibelle() {
		return libelle;
	}

	public void setLibelle(String libelle) {
		this.libelle = libelle;
	}

	public Document getDocument() {
		return document;
	}

	public void setDocument(Document document) {
		this.document = document;
	}

	public Library getLibrary() {
		return library;
	}

	public void setLibrary(Library library) {
		this.library = library;
	}
	
	public List<UserCote> getUserCotes() {
		return this.userCotes;
	}
	
	public void setUserCotes(List<UserCote> userCotes) {
		this.userCotes = userCotes;
	}
	
	public void addUserCote(UserCote userCote) {
		this.userCotes.add(userCote);
	}
	
	public void removeUserCote(UserCote userCote) {
		this.userCotes.remove(userCote);
	}
	
	public Boolean getReserved() {
		return reserved;
	}
	
	public void setReserved(Boolean reserved) {
		this.reserved = reserved;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((document == null) ? 0 : document.hashCode());
		result = prime * result + ((libelle == null) ? 0 : libelle.hashCode());
		result = prime * result + ((library == null) ? 0 : library.hashCode());
		result = prime * result + ((reserved == null) ? 0 : reserved.hashCode());
		result = prime * result + ((userCotes == null) ? 0 : userCotes.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		Cote other = (Cote) obj;
		if (document == null) {
			if (other.document != null)
				return false;
		} else if (!document.equals(other.document))
			return false;
		if (libelle == null) {
			if (other.libelle != null)
				return false;
		} else if (!libelle.equals(other.libelle))
			return false;
		if (library == null) {
			if (other.library != null)
				return false;
		} else if (!library.equals(other.library))
			return false;
		if (reserved == null) {
			if (other.reserved != null)
				return false;
		} else if (!reserved.equals(other.reserved))
			return false;
		if (userCotes == null) {
			if (other.userCotes != null)
				return false;
		} else if (!userCotes.equals(other.userCotes))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Cote [libelle=" + libelle + ", document=" + document + ", library=" + library + ", userCotes="
				+ userCotes + ", reserved=" + reserved + "]";
	}
 
	
	
}
